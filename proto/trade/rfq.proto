syntax = "proto3";

import "types.proto";
import "seaport.proto";

package quay;

/**
 * Request for quote (RFQ) services and related message formats.
 */

service RFQ {
    /** Request quotes from makers via a single QuoteRequest message and receive a stream of QuoteResponse messages for use by gRPC-web clients. */
    rpc WebTaker (QuoteRequest) returns (stream QuoteResponse);
    /** Request quotes from makers via a stream of QuoteRequest messages and receive a stream of QuoteResponse messages. */
    rpc Taker (stream QuoteRequest) returns (stream QuoteResponse);
    /** Send quotes to takers via a stream of QuoteResponse messages and receive a stream of QuoteRequest messages. */
    rpc Maker (stream QuoteResponse) returns (stream QuoteRequest);
}

/** The Action enum specifies whether the taker is requesting a quote to buy or sell an asset. */
enum Action {
    BUY = 0;
    SELL = 1;
    INVALID = 255;
}

/** The fields comprising the quote request message give the maker what they need to provide a quote/signed offer. */
message QuoteRequest {
    /** The unique identifier for the quote request. This is used to match the
      * quote response to the quote request.
     */
    H128 ulid = 1;                 // Optional

    /** Ideally the maker would never know who the taker is, and vice-versa.
      * However, seaport reveals the makers' address to the taker.
      * takerAddress ensures there is no information asymmetry between
      * the maker and taker. Thought the trader may not always end up being
      * the taker.
     */
    H160 taker_address = 2;         // Optional

    ItemType item_type = 3;

    // The token address for which a quote is being requested.
    H160 token_address = 4;         // Optional

    /** The identifier_or_criteria represents either the ERC721 or ERC1155
     * token identifier or, in the case of a criteria-based item type, a
     * merkle root composed of the valid set of token identifiers for
     * the item. This value will be ignored for Ether and ERC20 item types,
     * and can optionally be zero for criteria-based item types to allow
     * for any identifier.
     */
    H256 identifier_or_criteria = 5; // Optional

    H256 amount = 6;

    /** A request by the Taker to the Maker, i.e. if the request is Buy the Taker wants to buy the option from the
     * Maker, whereas Sell is the Taker wanting to sell to the Maker.
     */
    Action action = 7;
}

// The quote response message contains the quote/signed offer from the maker.
message QuoteResponse {
    /** The unique identifier for the quote request. This is used to match the
      * quote response to the quote request.
     */
    H128 ulid = 1;          // Optional

    /** The address of the maker making the offer. */
    H160 maker_address = 2;  // Optional

    /** The order and signature from the maker. */
    SignedOrder order = 3;
}